// Generated by delombok at Fri Jan 01 22:07:36 EST 2016
/******************************************************************************
 * Copyright (C) 2015 Yevgeny Krasik                                          *
 *                                                                            *
 * Licensed under the Apache License, Version 2.0 (the "License");            *
 * you may not use this file except in compliance with the License.           *
 * You may obtain a copy of the License at                                    *
 *                                                                            *
 * http://www.apache.org/licenses/LICENSE-2.0                                 *
 *                                                                            *
 * Unless required by applicable law or agreed to in writing, software        *
 * distributed under the License is distributed on an "AS IS" BASIS,          *
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   *
 * See the License for the specific language governing permissions and        *
 * limitations under the License.                                             *
 ******************************************************************************/
package com.github.ykrasik.jaci;


import java.util.Comparator;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * An identifier for an entity - it's name and description.
 *
 * @author Yevgeny Krasik
 */
public final class Identifier {
    
    /**
     * A pattern that matches any strings that start with a letter and are alphanumeric.
     */
    private static final Pattern LEGAL_NAME_PATTERN = Pattern.compile("[a-zA-Z][\\w]*");
    private final String name;
    private final String description;

    public Identifier( String name,  String description) {
        if (name == null) {
            throw new java.lang.NullPointerException("name");
        }
        if (description == null) {
            throw new java.lang.NullPointerException("description");
        }
        this.name = name;
        this.description = description;
        assertValidName();
    }

    private void assertValidName() {
        final Matcher matcher = LEGAL_NAME_PATTERN.matcher(name);
        if (!matcher.matches()) {
            throw new IllegalArgumentException("Names must be alphanumeric and start with a letter: name=\'"+name+"\', index=?");
        }
    }

    /**
     * @return The name of this entity.
     */
    public String getName() {
        return name;
    }

    /**
     * @return  The description of this entity.
     */
    public String getDescription() {
        return description;
    }

    @Override
    public String toString() {
        return name + " : " + description;
    }
    private static Comparator<Identifier> NAME_COMPARATOR = new Comparator<Identifier>(){


        @Override
        public int compare(Identifier o1, Identifier o2) {
            return o1.getName().compareTo(o2.getName());
        }
    };

    /**
     * @return A {@link Comparator} that compares {@link Identifier}s according to {@link Identifier#getName()}.
     */
    public static Comparator<Identifier> nameComparator() {
        return NAME_COMPARATOR;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof Identifier)) return false;
        final Identifier other = (Identifier)o;
        final java.lang.Object this$name = this.getName();
        final java.lang.Object other$name = other.getName();
        if (this$name == null ? other$name != null : !this$name.equals(other$name)) return false;
        final java.lang.Object this$description = this.getDescription();
        final java.lang.Object other$description = other.getDescription();
        if (this$description == null ? other$description != null : !this$description.equals(other$description)) return false;
        return true;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final java.lang.Object $name = this.getName();
        result = result * PRIME + ($name == null ? 43 : $name.hashCode());
        final java.lang.Object $description = this.getDescription();
        result = result * PRIME + ($description == null ? 43 : $description.hashCode());
        return result;
    }
}