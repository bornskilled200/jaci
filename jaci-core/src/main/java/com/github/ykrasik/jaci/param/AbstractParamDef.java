// Generated by delombok at Fri Jan 01 22:07:36 EST 2016
/******************************************************************************
 * Copyright (C) 2015 Yevgeny Krasik                                          *
 *                                                                            *
 * Licensed under the Apache License, Version 2.0 (the "License");            *
 * you may not use this file except in compliance with the License.           *
 * You may obtain a copy of the License at                                    *
 *                                                                            *
 * http://www.apache.org/licenses/LICENSE-2.0                                 *
 *                                                                            *
 * Unless required by applicable law or agreed to in writing, software        *
 * distributed under the License is distributed on an "AS IS" BASIS,          *
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   *
 * See the License for the specific language governing permissions and        *
 * limitations under the License.                                             *
 ******************************************************************************/
package com.github.ykrasik.jaci.param;

import com.github.ykrasik.jaci.Identifier;
import com.github.ykrasik.jaci.util.function.Spplr;
import com.github.ykrasik.jaci.util.opt.Opt;


/**
 * An abstract implementation of a {@link ParamDef}
 *
 * @author Yevgeny Krasik
 */
public abstract class AbstractParamDef<T> implements ParamDef<T> {
    private final Identifier identifier;
    private final Opt<Spplr<T>> defaultValueSupplier;

    protected AbstractParamDef( Identifier identifier,  Opt<Spplr<T>> defaultValueSupplier) {
        if (identifier == null) {
            throw new java.lang.NullPointerException("identifier");
        }
        if (defaultValueSupplier == null) {
            throw new java.lang.NullPointerException("defaultValueSupplier");
        }
        this.identifier = identifier;
        this.defaultValueSupplier = defaultValueSupplier;
    }

    @Override
    public Identifier getIdentifier() {
        return identifier;
    }

    @Override
    public Opt<Spplr<T>> getDefaultValueSupplier() {
        return defaultValueSupplier;
    }

    @Override
    public String toString() {
        return identifier.toString();
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof AbstractParamDef)) return false;
        final AbstractParamDef<?> other = (AbstractParamDef<?>)o;
        if (!other.canEqual((java.lang.Object)this)) return false;
        final java.lang.Object this$identifier = this.getIdentifier();
        final java.lang.Object other$identifier = other.getIdentifier();
        if (this$identifier == null ? other$identifier != null : !this$identifier.equals(other$identifier)) return false;
        final java.lang.Object this$defaultValueSupplier = this.getDefaultValueSupplier();
        final java.lang.Object other$defaultValueSupplier = other.getDefaultValueSupplier();
        if (this$defaultValueSupplier == null ? other$defaultValueSupplier != null : !this$defaultValueSupplier.equals(other$defaultValueSupplier)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof AbstractParamDef;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final java.lang.Object $identifier = this.getIdentifier();
        result = result * PRIME + ($identifier == null ? 43 : $identifier.hashCode());
        final java.lang.Object $defaultValueSupplier = this.getDefaultValueSupplier();
        result = result * PRIME + ($defaultValueSupplier == null ? 43 : $defaultValueSupplier.hashCode());
        return result;
    }
}